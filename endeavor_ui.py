# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SGufRVlQjDL-fLxymoxLYvi7PtlYM7NW
"""

import streamlit as st
import requests
import json
import csv
import os
from typing import Optional, Dict, Any

EXTRACTION_API_URL = "https://plankton-app-qajlk.ondigitalocean.app/extraction_api"
MATCH_API_URL = "https://endeavor-interview-api-gzwki.ondigitalocean.app/match"

def extract_pdf_content(file) -> Optional[list]:
    files = {'file': (file.name, file, 'application/pdf')}
    headers = {'accept': 'application/json'}
    try:
        response = requests.post(EXTRACTION_API_URL, files=files, headers=headers)
        response.raise_for_status()
        data = response.json()
        if isinstance(data, list):
            return data
        else:
            st.error("Unexpected response format from extraction API.")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error calling extraction API: {e}")
        return None

def get_first_match(description: str, limit: int = 5) -> Optional[Dict[str, Any]]:
    params = {"query": description, "limit": limit}
    try:
        response = requests.get(MATCH_API_URL, params=params)
        response.raise_for_status()
        data = response.json()
        if isinstance(data, list) and len(data) > 0:
            return data[0]
        else:
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error calling match API: {e}")
        return None

def save_csv(data, output_path="output.csv"):
    with open(output_path, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=data[0].keys())
        writer.writeheader()
        writer.writerows(data)
    return output_path

def main():
    st.title("üìÑ Endeavor AI - PDF Extractor and Matcher")
    uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])

    if uploaded_file:
        with st.spinner("Extracting data from PDF..."):
            line_items = extract_pdf_content(uploaded_file)

        if line_items:
            st.success(f"‚úÖ Extracted {len(line_items)} line items.")
            updated_items = []

            for idx, item in enumerate(line_items):
                st.markdown(f"### üîç Item {idx + 1}")
                description = item.get("Request Item") or item.get("request item") or ""
                st.write(f"**Description:** {description}")

                match_result = get_first_match(description)
                suggested = match_result["match"] if match_result else "No match found"
                score = match_result["score"] if match_result else None
                st.write(f"**Suggested Match:** {suggested}")
                st.write(f"**Score:** {score}")

                choice = st.radio(f"Accept suggestion for item {idx + 1}?", ["Yes", "No"], key=idx)
                if choice == "Yes":
                    item["Matched Item"] = suggested
                    item["Match Score"] = score
                else:
                    corrected = st.text_input(f"Enter corrected match for item {idx + 1}", key=f"corrected_{idx}")
                    if corrected:
                        item["Matched Item"] = corrected
                        item["Match Score"] = "User Corrected"
                    else:
                        item["Matched Item"] = None
                        item["Match Score"] = None

                updated_items.append(item)

            if st.button("üíæ Save Output"):
                json_path = "updated_line_items.json"
                csv_path = "output.csv"

                with open(json_path, "w") as f:
                    json.dump(updated_items, f, indent=2)

                save_csv(updated_items, csv_path)
                st.success(f"‚úÖ Saved results to `{json_path}` and `{csv_path}`")

                with open(json_path, "rb") as f:
                    st.download_button("Download JSON", f, file_name=json_path)

                with open(csv_path, "rb") as f:
                    st.download_button("Download CSV", f, file_name=csv_path)

if __name__ == "__main__":
    main()